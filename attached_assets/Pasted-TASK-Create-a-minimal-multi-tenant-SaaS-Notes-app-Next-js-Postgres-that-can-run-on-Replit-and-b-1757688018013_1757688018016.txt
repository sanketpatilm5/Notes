TASK: Create a minimal multi-tenant SaaS Notes app (Next.js + Postgres) that can run on Replit and be deployed later to Vercel.

GOALS / REQUIREMENTS:
1. Multi-tenancy via a shared schema:
   - Tables: tenants, users, notes
   - Use tenant_id on users & notes
   - Seed two tenants: slug "acme" and "globex"

2. Authentication & Authorization:
   - JWT-based login
   - Roles: admin, member
   - Seed these accounts (password = "password"):
     - admin@acme.test (Admin, tenant acme)
     - user@acme.test (Member, tenant acme)
     - admin@globex.test (Admin, tenant globex)
     - user@globex.test (Member, tenant globex)
   - JWT must include userId, email, role, tenantId, tenantSlug

3. Subscription plan gating:
   - tenants.plan = 'free' or 'pro' (default 'free')
   - Free plan allows only 3 notes per tenant
   - Endpoint to upgrade: POST /api/tenants/[slug]/upgrade (admin-only, immediate effect)

4. Notes API (CRUD) with tenant isolation & role enforcement:
   - POST /api/notes -> create note
   - GET /api/notes -> list tenant notes
   - GET /api/notes/:id -> fetch note
   - PUT /api/notes/:id -> update note
   - DELETE /api/notes/:id -> delete note

5. Other endpoints:
   - POST /api/auth/login -> returns { token }
   - POST /api/auth/seed (optional) -> idempotent seed (safe)
   - GET /api/health (and a top-level /health rewrite) -> { "status": "ok" }
   - POST /api/tenants/[slug]/invite -> admin-only, creates new user with default password "password"

6. Frontend:
   - Minimal Next.js pages:
     - /login: login form (inputs: email, password)
     - /notes: list notes, create new note, delete note, show "Upgrade to Pro" CTA when tenant is free and reached limit
   - Store token in localStorage and send Authorization: Bearer <token> in API calls.

7. CORS:
   - All API endpoints must set Access-Control-Allow-Origin: * and basic CORS headers.

8. Project must be runnable locally on Replit:
   - Provide package.json with scripts: dev, build, start, seed
   - Provide scripts/seed.js to create DB schema and seed test data
   - Use node-postgres (pg), bcryptjs, jsonwebtoken
   - Keep code simple and "junior-like" — lots of console.log and minimal abstraction.

9. Files & structure (exact):
   - package.json
   - vercel.json (rewrites /health -> /api/health)
   - .env.example
   - README.md
   - lib/db.js
   - lib/auth.js
   - scripts/seed.js
   - pages/_app.js
   - pages/index.js (redirect to /login)
   - pages/login.js
   - pages/notes.js
   - pages/api/health.js
   - pages/api/auth/login.js
   - pages/api/auth/seed.js (optional)
   - pages/api/notes/index.js
   - pages/api/notes/[id].js
   - pages/api/tenants/[slug]/upgrade.js
   - pages/api/tenants/[slug]/invite.js
   - styles.css (basic)

10. Environment variables:
    - DATABASE_URL (postgres connection string)
    - JWT_SECRET

DETAILED CODING INSTRUCTIONS / CONSTRAINTS:
- Use Next.js API routes (pages/api/*)
- Use CommonJS (require/module.exports) for lib and scripts, and normal Next.js export default for API files and pages
- For DB use a simple Pool from 'pg' with connectionString from DATABASE_URL
- Use bcryptjs.hashSync('password', 8) for seeded users and bcryptjs.compareSync for login
- JWT expiration 7 days
- Make DB table creation idempotent; seed script must be safe to run multiple times
- Ensure tenancy checks: when reading/updating/deleting notes, verify note.tenant_id === token.tenantId
- For /api/tenants/[slug]/upgrade: only admin from same tenant may upgrade
- For invite: only admin from same tenant can create user record. Default password "password".
- Add console.log messages in seed and API endpoints to reflect actions (junior-style)
- Keep code short and readable (avoid heavy abstractions).

RUN & TEST CHECKLIST (what the agent must ensure):
1. After creating files, install dependencies (npm install)
2. Provide instructions in README.md for:
   - creating .env.local (copy .env.example)
   - running npm run seed
   - running npm run dev
3. Demonstrate (via terminal output or comments) how to:
   - Run `npm run seed` to create tables + seed users
   - POST to /api/auth/login with seeded accounts to get token
   - Use token to call GET /api/notes (should return empty list for new tenants)
   - Create notes until free limit (3) then fail on 4th creation for free tenant
   - POST /api/tenants/acme/upgrade as admin to lift limit and then create more notes
   - GET /health returns {status: "ok"}
4. Ensure the project runs on Node 18+ (Replit default is fine)

EXTRA (optional but preferred):
- Provide minimal inline comments in code that explain what's happening (junior dev style)
- Minimal CSS to make frontend usable
- Provide a small test script or curl examples in README showing login + create note + upgrade flows

DELIVERABLE:
- Create files in the Replit workspace exactly as described.
- After creating files, run `npm install` and `npm run seed`. Return the outputs or logs of those commands (success messages).
- Provide a short "how to test" section printed to the console or as a file TESTING.md with curl commands for the automated grader to follow.

STRICT: Do not attempt to use external deployment services. Focus on a working project in the Replit environment that can later be deployed to Vercel. Keep everything self-contained.

If anything is ambiguous, make the simplest reasonable choice and continue (for example, use tenant.plan default 'free'). Do not ask me questions — implement.

END.
